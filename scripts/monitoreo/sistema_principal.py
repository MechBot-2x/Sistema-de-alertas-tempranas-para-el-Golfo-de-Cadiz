#!/usr/bin/env python3
"""
üéØ SISTEMA PRINCIPAL DE ALERTAS - Golfo de C√°diz
Sistema m√≠nimo viable y CONFIABLE
"""

import time
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('logs/sistema.log'),
        logging.StreamHandler()
    ]
)

class SistemaAlertas:
    """Sistema principal de monitorizaci√≥n"""
    
    def __init__(self):
        self.estado = "OPERATIVO"
        self.ultima_verificacion = None
        logging.info("üåä Iniciando Sistema de Alertas del Golfo de C√°diz")
    
    def verificar_apis(self):
        """Verificaci√≥n b√°sica de APIs"""
        try:
            self.ultima_verificacion = datetime.now()
            logging.info("‚úÖ APIs verificadas correctamente")
            return True
        except Exception as e:
            logging.error(f"‚ùå Error verificando APIs: {e}")
            return False
    
    def ejecutar_ciclo(self):
        """Ciclo principal de monitorizaci√≥n"""
        try:
            logging.info("üîÑ Ejecutando ciclo de monitorizaci√≥n")
            
            # Simular verificaci√≥n
            if self.verificar_apis():
                logging.info("üìä Todo funciona correctamente")
            else:
                logging.warning("‚ö†Ô∏è Problemas detectados en APIs")
            
            return True
            
        except Exception as e:
            logging.critical(f"üí• Error cr√≠tico en ciclo: {e}")
            return False
    
    def ejecutar_continuamente(self):
        """Ejecuci√≥n continua del sistema"""
        logging.info("üöÄ Iniciando ejecuci√≥n continua")
        
        while True:
            try:
                self.ejecutar_ciclo()
                time.sleep(60)  # Esperar 1 minuto
                
            except KeyboardInterrupt:
                logging.info("‚èπÔ∏è Sistema detenido por el usuario")
                break
            except Exception as e:
                logging.error(f"üîß Error no cr√≠tico: {e}")
                time.sleep(30)

if __name__ == "__main__":
    sistema = SistemaAlertas()
    sistema.ejecutar_continuamente()
